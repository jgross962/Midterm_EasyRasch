integrateIt(x,y,firstVal,lastVal,"Trap")
x = 1:4
y = 1:4
integrateIt(x,y,firstVal,lastVal,"Trap")
innerVals = 0
if (length(y)>2){
innerVals = y[2:length(y)-1]
}
innerOddValues = innerVals[which(y%%2==1)]
y = 1:10
innerVals = 0
if (length(y)>2){
innerVals = y[2:length(y)-1]
}
innerOddValues = innerVals[which(y%%2==1)]
y[2]
y[2:8]
innerVals = y[2:length(y)-1]
innerVals = y[:length(y)-1]
innerVals = y[5:length(y)-1]
innerVals = y[3:length(y)-1]
innerVals = y[1:length(y)-1]
innerVals = y[2:length(y)-1]
innerVals = y[2:length(y)]
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals-1)]
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals-1)]
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals)-1]
innerOddValues = innerVals[which(y%%2==1)]
innerOddValues = innerVals[which(innerVals%%2==0)]
x = 1:10
y = 30:40
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:10
y = rep(1,10)
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:4
y = 1:4
integrateIt(x,y,firstVal,lastVal,"Simpsons")
integrateIt = function(x,y,a,b,rule){
## cREATE rule to throw error if x is not sorted
## Create rule to make sure x and y are same length
# Trapezoid Rule -- using provided formula and fixed size assumption
if (rule == "Trap"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
T = width*1/2*(sum(2*y)-y[1]-y[length(y)])
return(T)
}
## Actual Trapezoid Rule -- if not all fixed size
# area=0
# for (i in x[2]:x[length(x)]){
#   width = x[i]-x[i-1]
#   height1 = y[i-1]
#   height2 = y[i]
#   area <<- area+ 1/2*width*(height1+height2)
# }
# area
if (rule == "Simpsons"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
innerVals = 0
if (length(y)>2){
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals-1)]
}
innerFourTimesValues = innerVals[which(innerVals%%2==0)]
S = 1/3*h * (sum(y)+sum(innerVals)+2*sum(innerFourTimesValues))
return(S)
}
}
## Test Simpsons
x = 1:10
y = 30:40
integrateIt(x,y,firstVal,lastVal,"Simpsons")
integrateIt = function(x,y,a,b,rule){
## cREATE rule to throw error if x is not sorted
## Create rule to make sure x and y are same length
# Trapezoid Rule -- using provided formula and fixed size assumption
if (rule == "Trap"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
T = width*1/2*(sum(2*y)-y[1]-y[length(y)])
return(T)
}
## Actual Trapezoid Rule -- if not all fixed size
# area=0
# for (i in x[2]:x[length(x)]){
#   width = x[i]-x[i-1]
#   height1 = y[i-1]
#   height2 = y[i]
#   area <<- area+ 1/2*width*(height1+height2)
# }
# area
if (rule == "Simpsons"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
innerVals = 0
if (length(y)>2){
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals-1)]
}
innerFourTimesValues = innerVals[which(innerVals%%2==0)]
S = 1/3*width * (sum(y)+sum(innerVals)+2*sum(innerFourTimesValues))
return(S)
}
}
## Test Simpsons
x = 1:10
y = 30:40
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:10
y = 30:40
integrateIt(x,y,firstVal,lastVal,"Trap")
x = 1:10
y = rep(1,10)
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:10
y = rep(1,10)
integrateIt(x,y,firstVal,lastVal,"Trap")
x = 1:4
y = 1:4
integrateIt(x,y,firstVal,lastVal,"Trap")
x = 1:4
y = 1:4
integrateIt(x,y,firstVal,lastVal,"Simpsons")
## Test Simpsons
x = 1:10
y = 11:20
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:10
y = 11:20
integrateIt(x,y,firstVal,lastVal,"Trap")
## Test Simpsons
x = 1:10
y = 11:20
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:10
y = rep(1,10)
integrateIt(x,y,firstVal,lastVal,"Simpsons")
x = 1:10
y = rep(1,10)
integrateIt(x,y,firstVal,lastVal,"Simpsons")
y = rep(1,10)
y
x = 1:10
y = 1:10
integrateIt(x,y,firstVal,lastVal,"Simpsons")
## Test Simpsons
x = 1:10
y = 11:20
integrateIt(x,y,firstVal,lastVal,"Simpsons")
setGeneric("integrateIt",
function(x = "numeric",
y = "numeric",
bounds = "numeric",
rule = "String"
){
standardGeneric("integrateIt")
})
setMethod("integrateIt",
function(x,y,bounds,rule){
## CREATE rule to throw error if x is not sorted
## Create rule to make sure x and y are same length
# Trapezoid Rule -- using provided formula and fixed size assumption
if (rule == "Trap"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
T = width*1/2*(sum(2*y)-y[1]-y[length(y)])
return(T)
}
## Actual Trapezoid Rule -- if not all fixed size
# area=0
# for (i in x[2]:x[length(x)]){
#   width = x[i]-x[i-1]
#   height1 = y[i-1]
#   height2 = y[i]
#   area <<- area+ 1/2*width*(height1+height2)
# }
# area
if (rule == "Simpsons"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
innerVals = 0
if (length(y)>2){
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals-1)]
}
innerFourTimesValues = innerVals[which(innerVals%%2==0)]
S = 1/3*width * (sum(y)+sum(innerVals)+2*sum(innerFourTimesValues))
return(S)
}
}
)
integrateIt = function(x,y,a,b,rule){
## cREATE rule to throw error if x is not sorted
## Create rule to make sure x and y are same length
# Trapezoid Rule -- using provided formula and fixed size assumption
if (rule == "Trap"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
T = width*1/2*(sum(2*y)-y[1]-y[length(y)])
return(T)
}
## Actual Trapezoid Rule -- if not all fixed size
# area=0
# for (i in x[2]:x[length(x)]){
#   width = x[i]-x[i-1]
#   height1 = y[i-1]
#   height2 = y[i]
#   area <<- area+ 1/2*width*(height1+height2)
# }
# area
if (rule == "Simpsons"){
b = x[length(x)]
a = x[1]
width = (b-a)/(length(x)-1)
innerVals = 0
if (length(y)>2){
innerVals = y[2:length(y)]
innerVals = innerVals[1:length(innerVals-1)]
}
innerFourTimesValues = innerVals[which(innerVals%%2==0)]
S = 1/3*width * (sum(y)+sum(innerVals)+2*sum(innerFourTimesValues))
return(S)
}
}
## Test Trap
firstVal = 1
## Test Trap
firstVal = 1
lastVal = 11
x = 1:11
y = 11:21
integrateIt(x,y,firstVal,lastVal,"Trap")
x = 1:10
y = rep(1,10)
integrateIt(x,y,firstVal,lastVal,"Trap")
y = 1:4
x = 1:4
x = 1:11
y = 11:21
integrateIt(x,y,firstVal,lastVal,"Trap")
?runif
U = runif(10000)
rm(list= ls())
U = runif(10000)
U<.5
U[which(U)<.5]=1
U[which(U<.5)]=1
U = runif(10000)
U[which(U<.5)]=1
U[which(U<.5)]=1U
U
U = runif(10000)
U[which(U<.5)]=1
U[which(U!=1)]=0
U
U = runif(10000)
indicator = numeric(length(U))
indicator[which(U<.5)]=1
indicator[which(U!=1)]=0
indicator
U
U = runif(10000)
indicator = numeric(length(U))
which(U<.5)
indicator[which(U<.5)]=1
indicator
table(indicator)
X = sqrt(n)*indicator
n = 10
U = runif(10000)
indicator = numeric(length(U))
indicator[which(U<.5)]=1
X = sqrt(n)*indicator
n = 10
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
Xn
X
n = 4
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
n = 4
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
n = 100
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 100
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 10000
n = 10000
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 10000
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 10000
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 10000
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
n = 10
U = runif(n)
indicator = numeric(length(U))
indicator[which(U<1/n)]=1
X = sqrt(n)*indicator
X
hist(X)
mean(X)
print("hello")
?setMethod
rm(list = ls())
setwd('C:/Users/jgros/Documents/GitHub/Midterm_EasyRasch')
library(devtools)
library(roxygen2)
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
?signature
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
print
?print
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
test3 = new("Rasch", name="Jon",a =c(1,.1,2), y =c(1,1,0))
print(test3)
print("hello")
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
print(test3) # Print Rasch Object
print("hello") # Print non-rasch object
### Test to ensure set Validity works
testBad1 = new("Rasch", name=3,a =c(2,4,3), y =c(1,1,0))
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
### Test to ensure set Validity works
testBad1 = new("Rasch", name=3,a =c(2,4,3), y =c(1,1,0))
testBad2 = new("Rasch", name="Jon",a =c(2,4,3,5), y =c(1,1,0))
### Test with values
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
##Test Rasch
### Test as empty object
test1 = new("Rasch")
test1
### Test with values
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
test2
ent.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
### Test with values
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
### Test with values
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
##Test Rasch
### Test as empty object
test1 = new("Rasch")
test1
current.code = as.package('easyRasch')
load_all(current.code)
document(current.code)
### Test with values
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
test2
### Test to ensure set Validity works
testBad1 = new("Rasch", name=3,a =c(2,4,3), y =c(1,1,0))
testBad2 = new("Rasch", name="Jon",a =c(2,4,3,5), y =c(1,1,0))
##Test Rasch
test1 = new("Rasch", name="Jon",a =1, y =1)
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
##Test Rasch
test1 = new("Rasch", name="Jon",a =1, y =1)
test1
test2 = new("Rasch", name="Jon",a =c(2,4,3), y =c(1,1,0))
test2
